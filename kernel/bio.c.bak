// Buffer cache.
//
// The buffer cache is a linked list of buf structures holding
// cached copies of disk block contents.  Caching disk blocks
// in memory reduces the number of disk reads and also provides
// a synchronization point for disk blocks used by multiple processes.
//
// Interface:
// * To get a buffer for a particular disk block, call bread.
// * After changing buffer data, call bwrite to write it to disk.
// * When done with the buffer, call brelse.
// * Do not use the buffer after calling brelse.
// * Only one process at a time can use a buffer,
//     so do not keep them longer than necessary.


#include "types.h"
#include "param.h"
#include "spinlock.h"
#include "sleeplock.h"
#include "riscv.h"
#include "defs.h"
#include "fs.h"
#include "buf.h"

// the number of buskets
#define NBUCKETS 13

struct {

  //each busket has a lock
  struct spinlock lock[NBUCKETS];
  struct buf buf[NBUF];

  // Linked list of all buffers, through prev/next.
  // Sorted by how recently the buffer was used.
  // head.next is most recent, head.prev is least.
  //struct buf head;

  struct buf hashbucket[NBUCKETS];
} bcache;

int bhash(int blockno){
  return blockno % NBUCKETS;
}

void
binit(void)
{
  struct buf *b;
  for(int i=0;i<NBUCKETS;i++)
  {	initlock(&bcache.lock[i], "bcache.bucket");

  // Create linked list of buffers
  /*bcache.head.prev = &bcache.head;
  bcache.head.next = &bcache.head;
  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
    b->next = bcache.head.next;
    b->prev = &bcache.head;
    initsleeplock(&b->lock, "buffer");
    bcache.head.next->prev = b;
    bcache.head.next = b;
  }*/
	// each node points to itself
	b = &bcache.hashbucket[i];
	b->prev = b;
    	b->next = b;
  }
  for(b = bcache.buf; b < bcache.buf+NBUF; b++)
  {
	  // draw a picture and then you can figure it out easily
  	b->next = bcache.hashbucket[0].next;
	b->prev = &bcache.hashbucket[0];
	initsleeplock(&b->lock, "buffer");
	bcache.hashbucket[0].next->prev = b;
	bcache.hashbucket[0].next = b;
  }
}

// Look through buffer cache for block on device dev.
// If not found, allocate a buffer.
// In either case, return locked buffer.
static struct buf*
bget(uint dev, uint blockno)
{
  struct buf *b;
  int h=bhash(blockno);

  acquire(&bcache.lock[h]);

  // Is the block already cached?
  /*for(b = bcache.head[h].next; b != &bcache.head; b = b->next){
    if(b->dev == dev && b->blockno == blockno){
      b->refcnt++;
      release(&bcache.lock);
      acquiresleep(&b->lock);
      return b;
    }*/



  for(b = bcache.hashbucket[h].next; b != &bcache.hashbucket[h]; b = b->next)
  {
	  if(b->dev == dev && b->blockno == blockno)
	  {
	  	b->refcnt++;
		release(&bcache.lock[h]);
      		acquiresleep(&b->lock);
      		return b;

	  }


  }
  // if we fail to find what we want in the busket, then we should find what we want in other bustets
  int nh = (h + 1) % NBUCKETS;// next buskets
  
  while(nh != h)
  {
  	acquire(&bcache.lock[nh]);
	for(b = bcache.hashbucket[nh].prev; b != &bcache.hashbucket[nh]; b = b->prev)
	{
		if(b->refcnt == 0)
		{
			b->dev = dev;
			b->blockno = blockno;
        		b->valid = 0;
        		b->refcnt = 1;
			// 从原来bucket的链表中断开
        		b->next->prev=b->prev;
        		b->prev->next=b->next;
        		release(&bcache.lock[nh]);
			// 插入到blockno对应的bucket中去
			b->next=bcache.hashbucket[h].next;
        		b->prev=&bcache.hashbucket[h];
        		bcache.hashbucket[h].next->prev=b;
        		bcache.hashbucket[h].next=b;
        		release(&bcache.lock[h]);
        		acquiresleep(&b->lock);
        		return b;
		}
	}
	release(&bcache.lock[nh]);
    	nh=(nh+1)%NBUCKETS;
  
  }
  panic("bget: no buffers");
  
  
  
  
  
 /* 
  
  // Not cached.
  // Recycle the least recently used (LRU) unused buffer.
  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
    if(b->refcnt == 0) {
      b->dev = dev;
      b->blockno = blockno;
      b->valid = 0;
      b->refcnt = 1;
      release(&bcache.lock);
      acquiresleep(&b->lock);
      return b;
    }
  }
  panic("bget: no buffers");
*/
}

// Return a locked buf with the contents of the indicated block.
struct buf*
bread(uint dev, uint blockno)
{
  struct buf *b;

  b = bget(dev, blockno);
  if(!b->valid) {
    virtio_disk_rw(b, 0);
    b->valid = 1;
  }
  return b;
}

// Write b's contents to disk.  Must be locked.
void
bwrite(struct buf *b)
{
  if(!holdingsleep(&b->lock))
    panic("bwrite");
  virtio_disk_rw(b, 1);
}

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void
brelse(struct buf *b)
{
  if(!holdingsleep(&b->lock))
    panic("brelse");
  releasesleep(&b->lock);

  int h=bhash(b->blockno);
  acquire(&bcache.lock[h]);
  b->refcnt--;
  if (b->refcnt == 0) {
    // no one is waiting for it.
    b->next->prev = b->prev;
    b->prev->next = b->next;
    //b->next = bcache.head.next;
    //b->prev = &bcache.head;
    b->next = bcache.hashbucket[h].next;
    b->prev = &bcache.hashbucket[h];
    bcache.hashbucket[h].next->prev = b;
    bcache.hashbucket[h].next = b;
    
    
    //bcache.head.next->prev = b;
    //bcache.head.next = b;
  }
  
  release(&bcache.lock[h]);
}

void
bpin(struct buf *b) {
  /*acquire(&bcache.lock);
  b->refcnt++;
  release(&bcache.lock);
*/
  int h=bhash(b->blockno);
  acquire(&bcache.lock[h]);
  b->refcnt++;
  release(&bcache.lock[h]);
}

void
bunpin(struct buf *b) {
/*  acquire(&bcache.lock);
  b->refcnt--;
  release(&bcache.lock);
*/
  int h=bhash(b->blockno);
  acquire(&bcache.lock[h]);
  b->refcnt--;
  release(&bcache.lock[h]);


}


